(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('marked'), require('@angular/platform-browser'), require('@angular/common'), require('prismjs')) :
    typeof define === 'function' && define.amd ? define('ngx-md', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', 'marked', '@angular/platform-browser', '@angular/common', 'prismjs'], factory) :
    (factory((global['ngx-md'] = {}),global.ng.core,global.ng.common.http,global.rxjs,global.rxjs.operators,global.marked,global.ng.platformBrowser,global.ng.common,global.Prism));
}(this, (function (exports,i0,i1,rxjs,operators,marked,i2,common,Prism) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxMdService = /** @class */ (function () {
        function NgxMdService(_http, _domSanitizer) {
            this._http = _http;
            this._domSanitizer = _domSanitizer;
            this._renderer = new marked.Renderer();
            this.extendRenderer();
            this.setMarkedOptions({});
        }
        // get the content from remote resource
        // get the content from remote resource
        /**
         * @param {?} path
         * @return {?}
         */
        NgxMdService.prototype.getContent =
            // get the content from remote resource
            /**
             * @param {?} path
             * @return {?}
             */
            function (path) {
                var _this = this;
                return this._http.get(path, { responseType: 'text' })
                    .pipe(operators.map(function (res) { return _this.extractData(res); }), operators.catchError(this.handleError));
            };
        Object.defineProperty(NgxMdService.prototype, "renderer", {
            get: /**
             * @return {?}
             */ function () {
                return this._renderer;
            },
            enumerable: true,
            configurable: true
        });
        // handle data
        // handle data
        /**
         * @param {?} res
         * @return {?}
         */
        NgxMdService.prototype.extractData =
            // handle data
            /**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res || '';
            };
        /**
         * @param {?} options
         * @return {?}
         */
        NgxMdService.prototype.setMarkedOptions = /**
         * @param {?} options
         * @return {?}
         */
            function (options) {
                options = Object.assign({
                    gfm: true,
                    tables: true,
                    breaks: false,
                    pedantic: false,
                    sanitize: false,
                    smartLists: true,
                    smartypants: false
                }, options);
                options.renderer = this._renderer;
                marked.setOptions(options);
            };
        // comple markdown to html
        // comple markdown to html
        /**
         * @param {?} data
         * @param {?=} sanitize
         * @return {?}
         */
        NgxMdService.prototype.compile =
            // comple markdown to html
            /**
             * @param {?} data
             * @param {?=} sanitize
             * @return {?}
             */
            function (data, sanitize) {
                if (sanitize === void 0) {
                    sanitize = true;
                }
                return this._domSanitizer.sanitize(sanitize ? i0.SecurityContext.HTML : i0.SecurityContext.NONE, marked.parse(data).trim());
            };
        // handle error
        // handle error
        /**
         * @param {?} error
         * @return {?}
         */
        NgxMdService.prototype.handleError =
            // handle error
            /**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var errMsg;
                if (error instanceof fetch) {
                    /** @type {?} */
                    var body = error.json() || '';
                    /** @type {?} */
                    var err = body.error || JSON.stringify(body);
                    errMsg = error.status + " - " + (error.statusText || '') + " " + err;
                }
                else {
                    errMsg = error.message ? error.message : error.toString();
                }
                return rxjs.throwError(errMsg);
            };
        // extend marked render to support todo checkbox
        // extend marked render to support todo checkbox
        /**
         * @return {?}
         */
        NgxMdService.prototype.extendRenderer =
            // extend marked render to support todo checkbox
            /**
             * @return {?}
             */
            function () {
                this._renderer.listitem = function (text) {
                    if (/^\s*\[[x ]\]\s*/.test(text)) {
                        text = text
                            .replace(/^\s*\[ \]\s*/, '<input type="checkbox" class="md-checkbox" disabled> ')
                            .replace(/^\s*\[x\]\s*/, '<input type="checkbox" class="md-checkbox" checked disabled> ');
                        return '<li style="list-style: none">' + text + '</li>';
                    }
                    else {
                        return '<li>' + text + '</li>';
                    }
                };
            };
        NgxMdService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgxMdService.ctorParameters = function () {
            return [
                { type: i1.HttpClient },
                { type: i2.DomSanitizer }
            ];
        };
        /** @nocollapse */ NgxMdService.ngInjectableDef = i0.defineInjectable({ factory: function NgxMdService_Factory() { return new NgxMdService(i0.inject(i1.HttpClient), i0.inject(i2.DomSanitizer)); }, token: NgxMdService, providedIn: "root" });
        return NgxMdService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxMdComponent = /** @class */ (function () {
        function NgxMdComponent(_mdService, _el, platformId) {
            this._mdService = _mdService;
            this._el = _el;
            this.platformId = platformId;
            this.changeLog = [];
            this.error = new i0.EventEmitter();
            this.loaded = new i0.EventEmitter();
            /**
             * Boolean indicating if the markdown content should be sanitized to avoid script injections
             */
            this.sanitizeHtml = true;
        }
        Object.defineProperty(NgxMdComponent.prototype, "path", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._path = value;
                    this.onPathChange();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgxMdComponent.prototype, "data", {
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value) {
                    this._data = value;
                    this.onDataChange(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        // on input
        // on input
        /**
         * @param {?} data
         * @return {?}
         */
        NgxMdComponent.prototype.onDataChange =
            // on input
            /**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data) {
                    this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);
                }
                else {
                    this._el.nativeElement.innerHTML = '';
                }
                this.highlightContent(false);
            };
        /**
         *  After view init
         */
        /**
         *  After view init
         * @return {?}
         */
        NgxMdComponent.prototype.ngAfterViewInit = /**
         *  After view init
         * @return {?}
         */
            function () {
                if (this._path) {
                    this.onPathChange();
                }
                else if (!this._data) {
                    this.processRaw();
                }
            };
        /**
         * @return {?}
         */
        NgxMdComponent.prototype.processRaw = /**
         * @return {?}
         */
            function () {
                this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));
                this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);
                this.highlightContent(false);
            };
        /**
         * get remote conent;
         */
        /**
         * get remote conent;
         * @return {?}
         */
        NgxMdComponent.prototype.onPathChange = /**
         * get remote conent;
         * @return {?}
         */
            function () {
                var _this = this;
                this._ext = this._path && this._path.split('.').splice(-1).join();
                this._mdService.getContent(this._path).pipe(operators.catchError(this.handleError))
                    .subscribe(function (data) {
                    _this.loaded.emit(data);
                    _this._md = _this._ext !== 'md' ? '```' + _this._ext + '\n' + data + '\n```' : data;
                    _this._el.nativeElement.innerHTML = _this._mdService.compile(_this.prepare(_this._md), _this.sanitizeHtml);
                    _this.highlightContent(false);
                });
            };
        /**
         * catch http error
         */
        /**
         * catch http error
         * @param {?} error
         * @return {?}
         */
        NgxMdComponent.prototype.handleError = /**
         * catch http error
         * @param {?} error
         * @return {?}
         */
            function (error) {
                this.error.emit(error);
                console.error('An error occurred', error); // for demo purposes only
                return error.message || error;
            };
        /**
         * Prepare string
         */
        /**
         * Prepare string
         * @param {?} raw
         * @return {?}
         */
        NgxMdComponent.prototype.prepare = /**
         * Prepare string
         * @param {?} raw
         * @return {?}
         */
            function (raw) {
                var _this = this;
                if (!raw) {
                    return '';
                }
                if (this._ext === 'md' || !this.path) {
                    /** @type {?} */
                    var isCodeBlock_1 = false;
                    return raw.split('\n').map(function (line) {
                        // If the first non-blank chars are an opening/closing code block, toggle the flag
                        if (_this.trimLeft(line).substring(0, 3) === '```') {
                            isCodeBlock_1 = !isCodeBlock_1;
                        }
                        return isCodeBlock_1 ? line : line.trim();
                    }).join('\n');
                }
                return raw.replace(/\"/g, '\'');
            };
        /**
         * Trim left whitespace
         */
        /**
         * Trim left whitespace
         * @param {?} line
         * @return {?}
         */
        NgxMdComponent.prototype.trimLeft = /**
         * Trim left whitespace
         * @param {?} line
         * @return {?}
         */
            function (line) {
                return line.replace(/^\s+|\s+$/g, '');
            };
        /**
         * Use Prism to highlight code snippets only on the browser
         */
        /**
         * Use Prism to highlight code snippets only on the browser
         * @param {?} async
         * @return {?}
         */
        NgxMdComponent.prototype.highlightContent = /**
         * Use Prism to highlight code snippets only on the browser
         * @param {?} async
         * @return {?}
         */
            function (async) {
                if (common.isPlatformBrowser(this.platformId)) {
                    Prism.highlightAll(async);
                }
            };
        NgxMdComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'markdown,[Markdown],ngx-md,[NgxMd]',
                        template: '<ng-content></ng-content>',
                        styles: [".token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }"]
                    }] }
        ];
        /** @nocollapse */
        NgxMdComponent.ctorParameters = function () {
            return [
                { type: NgxMdService },
                { type: i0.ElementRef },
                { type: String, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] }
            ];
        };
        NgxMdComponent.propDecorators = {
            error: [{ type: i0.Output }],
            loaded: [{ type: i0.Output }],
            path: [{ type: i0.Input }],
            data: [{ type: i0.Input }],
            sanitizeHtml: [{ type: i0.Input }]
        };
        return NgxMdComponent;
    }());
    /**
     * @param {?} html
     * @return {?}
     */
    function decodeHtml(html) {
        // https://stackoverflow.com/a/7394787/588521
        /** @type {?} */
        var txt = document.createElement('textarea');
        txt.innerHTML = html;
        return txt.value;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxMdConfig = /** @class */ (function () {
        function NgxMdConfig() {
        }
        NgxMdConfig.decorators = [
            { type: i0.Injectable }
        ];
        return NgxMdConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxMdModule = /** @class */ (function () {
        function NgxMdModule() {
        }
        /**
         * @return {?}
         */
        NgxMdModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: NgxMdModule,
                    providers: [NgxMdConfig]
                };
            };
        NgxMdModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [i1.HttpClientModule],
                        declarations: [NgxMdComponent],
                        providers: [NgxMdService],
                        exports: [NgxMdComponent],
                    },] }
        ];
        return NgxMdModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxMdService = NgxMdService;
    exports.NgxMdComponent = NgxMdComponent;
    exports.NgxMdModule = NgxMdModule;
    exports.ɵa = NgxMdConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1kLnVtZC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vbmd4LW1kL2xpYi9uZ3gtbWQuc2VydmljZS50cyIsIm5nOi8vbmd4LW1kL2xpYi9uZ3gtbWQuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtbWQvbGliL25neC1tZC5jb25maWcudHMiLCJuZzovL25neC1tZC9saWIvbmd4LW1kLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTZWN1cml0eUNvbnRleHQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZW5kZXJlciwgc2V0T3B0aW9ucywgcGFyc2UgfSBmcm9tICdtYXJrZWQnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neE1kU2VydmljZSB7XG4gIHByaXZhdGUgX3JlbmRlcmVyOiBhbnkgPSBuZXcgUmVuZGVyZXIoKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIF9kb21TYW5pdGl6ZXI6IERvbVNhbml0aXplclxuICApIHtcbiAgICB0aGlzLmV4dGVuZFJlbmRlcmVyKCk7XG4gICAgdGhpcy5zZXRNYXJrZWRPcHRpb25zKHt9KTtcbiAgfVxuXG4gIC8vIGdldCB0aGUgY29udGVudCBmcm9tIHJlbW90ZSByZXNvdXJjZVxuICBnZXRDb250ZW50KHBhdGg6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHBhdGgsIHtyZXNwb25zZVR5cGU6ICd0ZXh0J30pXG4gICAgLnBpcGUoXG4gICAgICBtYXAocmVzID0+IHRoaXMuZXh0cmFjdERhdGEocmVzKSksXG4gICAgICBjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcmVuZGVyZXIoKTogUmVuZGVyZXIge1xuICAgIHJldHVybiB0aGlzLl9yZW5kZXJlcjtcbiAgfVxuXG4gIC8vIGhhbmRsZSBkYXRhXG4gIHB1YmxpYyBleHRyYWN0RGF0YShyZXM6IGFueSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHJlcyB8fCAnJztcbiAgfVxuXG4gIHB1YmxpYyBzZXRNYXJrZWRPcHRpb25zKG9wdGlvbnM6IGFueSkge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGdmbTogdHJ1ZSxcbiAgICAgIHRhYmxlczogdHJ1ZSxcbiAgICAgIGJyZWFrczogZmFsc2UsXG4gICAgICBwZWRhbnRpYzogZmFsc2UsXG4gICAgICBzYW5pdGl6ZTogZmFsc2UsXG4gICAgICBzbWFydExpc3RzOiB0cnVlLFxuICAgICAgc21hcnR5cGFudHM6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgb3B0aW9ucy5yZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyO1xuICAgIHNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cblxuICAvLyBjb21wbGUgbWFya2Rvd24gdG8gaHRtbFxuICBwdWJsaWMgY29tcGlsZShkYXRhOiBzdHJpbmcsIHNhbml0aXplID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLl9kb21TYW5pdGl6ZXIuc2FuaXRpemUoXG4gICAgICBzYW5pdGl6ZSA/IFNlY3VyaXR5Q29udGV4dC5IVE1MIDogU2VjdXJpdHlDb250ZXh0Lk5PTkUsXG4gICAgICBwYXJzZShkYXRhKS50cmltKClcbiAgICApO1xuICB9XG5cbiAgLy8gaGFuZGxlIGVycm9yXG4gIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IGFueSk6IGFueSB7XG4gICAgbGV0IGVyck1zZzogc3RyaW5nO1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGZldGNoKSB7XG4gICAgICBjb25zdCBib2R5ID0gZXJyb3IuanNvbigpIHx8ICcnO1xuICAgICAgY29uc3QgZXJyID0gYm9keS5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgIGVyck1zZyA9IGAke2Vycm9yLnN0YXR1c30gLSAke2Vycm9yLnN0YXR1c1RleHQgfHwgJyd9ICR7ZXJyfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVyck1zZyA9IGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogZXJyb3IudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRocm93RXJyb3IoZXJyTXNnKTtcbiAgfVxuXG4gIC8vIGV4dGVuZCBtYXJrZWQgcmVuZGVyIHRvIHN1cHBvcnQgdG9kbyBjaGVja2JveFxuICBwcml2YXRlIGV4dGVuZFJlbmRlcmVyKCkge1xuICAgIHRoaXMuX3JlbmRlcmVyLmxpc3RpdGVtID0gZnVuY3Rpb24odGV4dDogc3RyaW5nKSB7XG4gICAgICBpZiAoL15cXHMqXFxbW3ggXVxcXVxccyovLnRlc3QodGV4dCkpIHtcbiAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgLnJlcGxhY2UoL15cXHMqXFxbIFxcXVxccyovLCAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwibWQtY2hlY2tib3hcIiBkaXNhYmxlZD4gJylcbiAgICAgICAgLnJlcGxhY2UoL15cXHMqXFxbeFxcXVxccyovLCAnPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwibWQtY2hlY2tib3hcIiBjaGVja2VkIGRpc2FibGVkPiAnKTtcbiAgICAgICAgcmV0dXJuICc8bGkgc3R5bGU9XCJsaXN0LXN0eWxlOiBub25lXCI+JyArIHRleHQgKyAnPC9saT4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT4nO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuIiwiXG5pbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQsIFBMQVRGT1JNX0lELCBJbmplY3QsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hNZFNlcnZpY2UgfSBmcm9tICcuL25neC1tZC5zZXJ2aWNlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCAqIGFzIFByaXNtIGZyb20gJ3ByaXNtanMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ21hcmtkb3duLFtNYXJrZG93bl0sbmd4LW1kLFtOZ3hNZF0nLFxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgc3R5bGVzOiBbXG4gICAgICAgIGAudG9rZW4ub3BlcmF0b3IsIC50b2tlbi5lbnRpdHksIC50b2tlbi51cmwsIC5sYW5ndWFnZS1jc3MgLnRva2VuLnN0cmluZywgLnN0eWxlIC50b2tlbi5zdHJpbmcge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgfVxuICAgICAgICAubWQtY2hlY2tib3h7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyBtYXJnaW46IDAgMC4yZW0gMC4yNWVtIC0xLjZlbTsgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICB9YFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4TWRDb21wb25lbnQgaW1wbGVtZW50cyAgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgX3BhdGg6IHN0cmluZztcbiAgICBfZGF0YTogc3RyaW5nO1xuICAgIF9tZDogYW55O1xuICAgIF9leHQ6IHN0cmluZztcbiAgICBjaGFuZ2VMb2c6IHN0cmluZ1tdID0gW107XG4gICAgQE91dHB1dCgpIGVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiAgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgICBAT3V0cHV0KCkgbG9hZGVkOiBFdmVudEVtaXR0ZXI8YW55PiAgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgX21kU2VydmljZTogTmd4TWRTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgX2VsOiBFbGVtZW50UmVmLFxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwdWJsaWMgcGxhdGZvcm1JZDogc3RyaW5nXG4gICAgKSB7IH1cblxuICAgIEBJbnB1dCgpXG4gICAgc2V0IHBhdGgodmFsdWU6IHN0cmluZykge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3BhdGggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vblBhdGhDaGFuZ2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBkYXRhKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9kYXRhID0gdmFsdWU7XG4gICAgICAgIHRoaXMub25EYXRhQ2hhbmdlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgbWFya2Rvd24gY29udGVudCBzaG91bGQgYmUgc2FuaXRpemVkIHRvIGF2b2lkIHNjcmlwdCBpbmplY3Rpb25zXG4gICAgICovXG4gICAgQElucHV0KCkgcHVibGljIHNhbml0aXplSHRtbCA9IHRydWU7XG5cblxuICAgIC8vIG9uIGlucHV0XG4gICAgb25EYXRhQ2hhbmdlKGRhdGE6IHN0cmluZykge1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9tZFNlcnZpY2UuY29tcGlsZShkYXRhLCB0aGlzLnNhbml0aXplSHRtbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbC5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgfVxuICAgICAgdGhpcy5oaWdobGlnaHRDb250ZW50KGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQWZ0ZXIgdmlldyBpbml0XG4gICAgICovXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgaWYgKHRoaXMuX3BhdGgpIHtcbiAgICAgICAgdGhpcy5vblBhdGhDaGFuZ2UoKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2RhdGEpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzUmF3KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvY2Vzc1JhdygpIHtcbiAgICAgIHRoaXMuX21kID0gdGhpcy5wcmVwYXJlKGRlY29kZUh0bWwodGhpcy5fZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUwpKTtcbiAgICAgIHRoaXMuX2VsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fbWRTZXJ2aWNlLmNvbXBpbGUodGhpcy5fbWQsIHRoaXMuc2FuaXRpemVIdG1sKTtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0Q29udGVudChmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IHJlbW90ZSBjb25lbnQ7XG4gICAgICovXG4gICAgb25QYXRoQ2hhbmdlKCkge1xuICAgICAgICB0aGlzLl9leHQgPSB0aGlzLl9wYXRoICYmIHRoaXMuX3BhdGguc3BsaXQoJy4nKS5zcGxpY2UoLTEpLmpvaW4oKTtcbiAgICAgICAgdGhpcy5fbWRTZXJ2aWNlLmdldENvbnRlbnQodGhpcy5fcGF0aCkucGlwZShjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZC5lbWl0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21kID0gdGhpcy5fZXh0ICE9PSAnbWQnID8gJ2BgYCcgKyB0aGlzLl9leHQgKyAnXFxuJyArIGRhdGEgKyAnXFxuYGBgJyA6IGRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9tZFNlcnZpY2UuY29tcGlsZSh0aGlzLnByZXBhcmUodGhpcy5fbWQpLCB0aGlzLnNhbml0aXplSHRtbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRDb250ZW50KGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNhdGNoIGh0dHAgZXJyb3JcbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiBTdWJzY3JpYmFibGU8YW55PiB7XG4gICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnJvcik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkJywgZXJyb3IpOyAvLyBmb3IgZGVtbyBwdXJwb3NlcyBvbmx5XG4gICAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlIHx8IGVycm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgc3RyaW5nXG4gICAgICovXG4gICAgIHByZXBhcmUocmF3OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCFyYXcpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZXh0ID09PSAnbWQnIHx8ICF0aGlzLnBhdGgpIHtcbiAgICAgICAgICAgIGxldCBpc0NvZGVCbG9jayA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIHJhdy5zcGxpdCgnXFxuJykubWFwKChsaW5lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZmlyc3Qgbm9uLWJsYW5rIGNoYXJzIGFyZSBhbiBvcGVuaW5nL2Nsb3NpbmcgY29kZSBibG9jaywgdG9nZ2xlIHRoZSBmbGFnXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJpbUxlZnQobGluZSkuc3Vic3RyaW5nKDAsIDMpID09PSAnYGBgJykge1xuICAgICAgICAgICAgICAgICAgICBpc0NvZGVCbG9jayA9ICFpc0NvZGVCbG9jaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzQ29kZUJsb2NrID8gbGluZSA6IGxpbmUudHJpbSgpO1xuICAgICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhdy5yZXBsYWNlKC9cXFwiL2csICdcXCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmltIGxlZnQgd2hpdGVzcGFjZVxuICAgICAqL1xuICAgIHByaXZhdGUgdHJpbUxlZnQobGluZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBsaW5lLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgUHJpc20gdG8gaGlnaGxpZ2h0IGNvZGUgc25pcHBldHMgb25seSBvbiB0aGUgYnJvd3NlclxuICAgICAqL1xuICAgIHByaXZhdGUgaGlnaGxpZ2h0Q29udGVudChhc3luYzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgUHJpc20uaGlnaGxpZ2h0QWxsKGFzeW5jKTtcbiAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlY29kZUh0bWwoaHRtbDogc3RyaW5nKSB7IC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83Mzk0Nzg3LzU4ODUyMVxuICAgIGNvbnN0IHR4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdHh0LmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIHR4dC52YWx1ZTtcbn1cblxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4TWRDb25maWcge1xuICAvKiogY29uZmlnIG1vZHVlICovXG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTmd4TWRTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtbWQuc2VydmljZSc7XG5pbXBvcnQgeyBOZ3hNZENvbmZpZyB9IGZyb20gJy4vbmd4LW1kLmNvbmZpZyc7XG5pbXBvcnQgeyBOZ3hNZENvbXBvbmVudCB9IGZyb20gJy4vbmd4LW1kLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtIdHRwQ2xpZW50TW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4TWRDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtOZ3hNZFNlcnZpY2VdLFxuICBleHBvcnRzOiBbTmd4TWRDb21wb25lbnRdLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hNZE1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE5neE1kTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbTmd4TWRDb25maWddXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlJlbmRlcmVyIiwibWFwIiwiY2F0Y2hFcnJvciIsInNldE9wdGlvbnMiLCJTZWN1cml0eUNvbnRleHQiLCJwYXJzZSIsInRocm93RXJyb3IiLCJJbmplY3RhYmxlIiwiSHR0cENsaWVudCIsIkRvbVNhbml0aXplciIsIkV2ZW50RW1pdHRlciIsImlzUGxhdGZvcm1Ccm93c2VyIiwiUHJpc20uaGlnaGxpZ2h0QWxsIiwiQ29tcG9uZW50IiwiRWxlbWVudFJlZiIsIkluamVjdCIsIlBMQVRGT1JNX0lEIiwiT3V0cHV0IiwiSW5wdXQiLCJOZ01vZHVsZSIsIkh0dHBDbGllbnRNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQVlFLHNCQUNVLEtBQWlCLEVBQ2pCLGFBQTJCO1lBRDNCLFVBQUssR0FBTCxLQUFLLENBQVk7WUFDakIsa0JBQWEsR0FBYixhQUFhLENBQWM7WUFIN0IsY0FBUyxHQUFRLElBQUlBLGVBQVEsRUFBRSxDQUFDO1lBS3RDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDM0I7Ozs7Ozs7UUFHRCxpQ0FBVTs7Ozs7O1lBQVYsVUFBVyxJQUFZO2dCQUF2QixpQkFNQztnQkFMQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRSxNQUFNLEVBQUMsQ0FBQztxQkFDbEQsSUFBSSxDQUNIQyxhQUFHLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFBLENBQUMsRUFDakNDLG9CQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFDO2FBQ0g7UUFFRCxzQkFBVyxrQ0FBUTs7O2dCQUFuQjtnQkFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7YUFDdkI7OztXQUFBOzs7Ozs7O1FBR00sa0NBQVc7Ozs7OztZQUFsQixVQUFtQixHQUFRO2dCQUN6QixPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUM7YUFDbEI7Ozs7O1FBRU0sdUNBQWdCOzs7O1lBQXZCLFVBQXdCLE9BQVk7Z0JBQ2xDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO29CQUN0QixHQUFHLEVB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