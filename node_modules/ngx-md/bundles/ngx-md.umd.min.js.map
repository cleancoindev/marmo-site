{"version":3,"sources":["ng://ngx-md/lib/ngx-md.service.ts","ng://ngx-md/lib/ngx-md.component.ts","ng://ngx-md/lib/ngx-md.config.ts","ng://ngx-md/lib/ngx-md.module.ts"],"names":["NgxMdService","_http","_domSanitizer","this","_renderer","Renderer","extendRenderer","setMarkedOptions","prototype","getContent","path","_this","get","responseType","pipe","map","res","extractData","catchError","handleError","Object","defineProperty","options","assign","gfm","tables","breaks","pedantic","sanitize","smartLists","smartypants","renderer","setOptions","compile","data","SecurityContext","HTML","NONE","parse","trim","error","errMsg","fetch","body","json","err","JSON","stringify","status","statusText","message","toString","throwError","listitem","text","test","replace","Injectable","args","providedIn","HttpClient","DomSanitizer","NgxMdComponent","_mdService","_el","platformId","changeLog","EventEmitter","loaded","sanitizeHtml","value","_path","onPathChange","_data","onDataChange","nativeElement","innerHTML","highlightContent","ngAfterViewInit","processRaw","_md","prepare","decodeHtml","html","txt","document","createElement","_ext","split","splice","join","subscribe","emit","console","raw","isCodeBlock_1","line","trimLeft","substring","async","isPlatformBrowser","Prism.highlightAll","Component","selector","template","ElementRef","Inject","PLATFORM_ID","Output","Input","NgxMdConfig","NgxMdModule","forRoot","ngModule","providers","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, SecurityContext } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { throwError, Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { Renderer, setOptions, parse } from 'marked';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMdService {\n  private _renderer: any = new Renderer();\n  constructor(\n    private _http: HttpClient,\n    private _domSanitizer: DomSanitizer\n  ) {\n    this.extendRenderer();\n    this.setMarkedOptions({});\n  }\n\n  // get the content from remote resource\n  getContent(path: string): Observable<any> {\n    return this._http.get(path, {responseType: 'text'})\n    .pipe(\n      map(res => this.extractData(res)),\n      catchError(this.handleError)\n    );\n  }\n\n  public get renderer(): Renderer {\n    return this._renderer;\n  }\n\n  // handle data\n  public extractData(res: any): string {\n    return res || '';\n  }\n\n  public setMarkedOptions(options: any) {\n    options = Object.assign({\n      gfm: true,\n      tables: true,\n      breaks: false,\n      pedantic: false,\n      sanitize: false,\n      smartLists: true,\n      smartypants: false\n    }, options);\n    options.renderer = this._renderer;\n    setOptions(options);\n  }\n\n  // comple markdown to html\n  public compile(data: string, sanitize = true) {\n    return this._domSanitizer.sanitize(\n      sanitize ? SecurityContext.HTML : SecurityContext.NONE,\n      parse(data).trim()\n    );\n  }\n\n  // handle error\n  private handleError(error: any): any {\n    let errMsg: string;\n    if (error instanceof fetch) {\n      const body = error.json() || '';\n      const err = body.error || JSON.stringify(body);\n      errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n    } else {\n      errMsg = error.message ? error.message : error.toString();\n    }\n    return throwError(errMsg);\n  }\n\n  // extend marked render to support todo checkbox\n  private extendRenderer() {\n    this._renderer.listitem = function(text: string) {\n      if (/^\\s*\\[[x ]\\]\\s*/.test(text)) {\n        text = text\n        .replace(/^\\s*\\[ \\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" disabled> ')\n        .replace(/^\\s*\\[x\\]\\s*/, '<input type=\"checkbox\" class=\"md-checkbox\" checked disabled> ');\n        return '<li style=\"list-style: none\">' + text + '</li>';\n      } else {\n        return '<li>' + text + '</li>';\n      }\n    };\n  }\n}\n\n","\nimport { Component, ElementRef, OnInit, AfterViewInit, Input, PLATFORM_ID, Inject, Output, EventEmitter } from '@angular/core';\nimport { NgxMdService } from './ngx-md.service';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as Prism from 'prismjs';\nimport { Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'markdown,[Markdown],ngx-md,[NgxMd]',\n    template: '<ng-content></ng-content>',\n    styles: [\n        `.token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {\n            background: none;\n        }\n        .md-checkbox{\n            vertical-align: middle; margin: 0 0.2em 0.25em -1.6em; font-size: 16px;\n        }`\n    ]\n})\nexport class NgxMdComponent implements  AfterViewInit {\n    _path: string;\n    _data: string;\n    _md: any;\n    _ext: string;\n    changeLog: string[] = [];\n    @Output() error: EventEmitter<any>  = new EventEmitter<any>();\n    @Output() loaded: EventEmitter<any>  = new EventEmitter<any>();\n\n    constructor(\n        public _mdService: NgxMdService,\n        public _el: ElementRef,\n        @Inject(PLATFORM_ID) public platformId: string\n    ) { }\n\n    @Input()\n    set path(value: string) {\n      if (value) {\n        this._path = value;\n        this.onPathChange();\n      }\n    }\n\n    @Input()\n    set data(value: string) {\n      if (value) {\n        this._data = value;\n        this.onDataChange(value);\n      }\n    }\n\n\n    /**\n     * Boolean indicating if the markdown content should be sanitized to avoid script injections\n     */\n    @Input() public sanitizeHtml = true;\n\n\n    // on input\n    onDataChange(data: string) {\n      if (data) {\n        this._el.nativeElement.innerHTML = this._mdService.compile(data, this.sanitizeHtml);\n      } else {\n        this._el.nativeElement.innerHTML = '';\n      }\n      this.highlightContent(false);\n    }\n\n    /**\n     *  After view init\n     */\n    ngAfterViewInit() {\n      if (this._path) {\n        this.onPathChange();\n      } else if (!this._data) {\n        this.processRaw();\n      }\n    }\n\n    processRaw() {\n      this._md = this.prepare(decodeHtml(this._el.nativeElement.innerHTML));\n      this._el.nativeElement.innerHTML = this._mdService.compile(this._md, this.sanitizeHtml);\n      this.highlightContent(false);\n    }\n\n    /**\n     * get remote conent;\n     */\n    onPathChange() {\n        this._ext = this._path && this._path.split('.').splice(-1).join();\n        this._mdService.getContent(this._path).pipe(catchError(this.handleError))\n            .subscribe(data => {\n                this.loaded.emit(data);\n                this._md = this._ext !== 'md' ? '```' + this._ext + '\\n' + data + '\\n```' : data;\n                this._el.nativeElement.innerHTML = this._mdService.compile(this.prepare(this._md), this.sanitizeHtml);\n                this.highlightContent(false);\n            });\n    }\n\n    /**\n     * catch http error\n     */\n    private handleError(error: any): Subscribable<any> {\n        this.error.emit(error);\n        console.error('An error occurred', error); // for demo purposes only\n        return error.message || error;\n    }\n\n    /**\n     * Prepare string\n     */\n     prepare(raw: string) {\n        if (!raw) {\n            return '';\n        }\n        if (this._ext === 'md' || !this.path) {\n            let isCodeBlock = false;\n            return raw.split('\\n').map((line: string) => {\n                // If the first non-blank chars are an opening/closing code block, toggle the flag\n                if (this.trimLeft(line).substring(0, 3) === '```') {\n                    isCodeBlock = !isCodeBlock;\n                }\n                return isCodeBlock ? line : line.trim();\n            }).join('\\n');\n        }\n        return raw.replace(/\\\"/g, '\\'');\n    }\n\n    /**\n     * Trim left whitespace\n     */\n    private trimLeft(line: string) {\n        return line.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /**\n     * Use Prism to highlight code snippets only on the browser\n     */\n    private highlightContent(async: boolean): void {\n      if (isPlatformBrowser(this.platformId)) {\n        Prism.highlightAll(async);\n      }\n    }\n}\n\nfunction decodeHtml(html: string) { // https://stackoverflow.com/a/7394787/588521\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n}\n\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NgxMdConfig {\n  /** config modue */\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxMdService } from './ngx-md.service';\nimport { NgxMdConfig } from './ngx-md.config';\nimport { NgxMdComponent } from './ngx-md.component';\n\n@NgModule({\n  imports: [HttpClientModule],\n  declarations: [NgxMdComponent],\n  providers: [NgxMdService],\n  exports: [NgxMdComponent],\n})\nexport class NgxMdModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxMdModule,\n      providers: [NgxMdConfig]\n    };\n  }\n}\n"]}